#!/usr/bin/env python3

# Script to generate reverse divisor to use in src/tds/numeric.c
# It computes q = (2^k)/div (where k >= 64) for div == 10^e (where e = 1..9)
# making sure that truncated n * q / 2^k (n < div * 2^64) is equal to
# truncated n / div

verbose = False

def valid(exp, d, Max):
	k = 2 ** exp
	q = k // d # quotient
	r = k % d  # remainder
	if verbose:
		print(f"d {d} k {k} q {q} r {r} d-r {d-r}")
	if q+1 >= 2**64:
		return False
	if r == 0:
		return False
	m = k // (d - r)
	if Max > m:
		return False
	return True

def all_valid(d):
	Max = d * (2**32)
	return [exp for exp in range(64, 128) if valid(exp, d, Max)]

for d in [10 ** x for x in range(1,10)]:
	res = all_valid(d)
	q = (2**res[0]) // d + 1
	shift = res[0] - 64
	print(f"res is {res} for {d} q is {q} shift {shift}")
